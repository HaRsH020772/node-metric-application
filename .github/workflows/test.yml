# This workflow will do a clean installation of Nodekjn.js dependencies, cache/restore them, build the source code, and run tests across different versions of Node.js
# For more information, see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CI for Node.js

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
# on:
#  workflow_dispatch:
#  #    inputs:
#       # firstName:
#       #  description: enter your first name
#       #  type: string
#       #  required: true
#       # choice:
#       #   description: 'Select an option'
#       #   required: true
#       #   type: choice
#       #   options:
#       #     - Option 1
#       #     - Option 2
#       #     - Option 3
env:
   DOCKER_USERNAME: ${{ fromJson(secrets.DOCKER_SECRETS).docker_username }}
   DOCKER_PASSWORD: ${{ fromJson(secrets.DOCKER_SECRETS).docker_secret_token }}
   IMAGE_NAME: adv-backend-metrics-application
   IMAGE_TAG: latest
   
jobs:
  build:

    runs-on: ubuntu-latest
    # environment: "prod"
    
    strategy:
      matrix:
        node-version: ['16.x']
     
    steps:

    
    # - name: greeting to user
    #   run: |
    #    echo " Good Morning  ${{ github.event.inputs.firstName}} !"
    #    echo " Good Morning  ${{ github.event.inputs.choice}} !"
    
    - name: Checkout Repository
      uses: actions/checkout@v3

    # - name: Checkout Repository 1
    #   uses: actions/checkout@v2
    #   with:
    #     repository: Shivang-inventyv/cicd 
    #     ref: main  

    # - name: Execute Script
    #   run: sh script.sh  # Replace with the name of your script file

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install Dependencies
      run: npm install

    - name: Build Docker Image
      run: docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .


    - name: Run Docker container
      run: |
        docker run -d --name my-node-app -p 7050:7050 ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        sleep 10

    - name: Check if container is running
      id: check_container
      run: |
          if [ "$(docker inspect -f '{{.State.Running}}' my-node-app)" = "true" ]; then
            echo "Container is running"
            exit 0
          else
            echo "Container is not running"
            exit 1
          fi
    - name: log
      run: docker logs my-node-app

    - name: Health Check
      run: |
          response=$(curl --write-out '%{http_code}' --silent --output /dev/null http://127.0.0.1:7050/health-check)
          if [ "$response" -ne 200 ]; then
            echo "Health check failed with status $response"
            exit 1
          fi
          echo "Health check passed with status $response"
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD}}

    # - name: Push Docker Image to Docker Hub
    #   run: docker push shivang1012/node-hello
